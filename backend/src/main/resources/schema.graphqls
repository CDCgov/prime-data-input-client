# java.util.Date implementation
scalar DateTime
# java.time.LocalDate
scalar LocalDate
scalar Upload

enum ResultValue {
  POSITIVE
  NEGATIVE
  UNDETERMINED
}

enum UserPermission {
  READ_PATIENT_LIST
  READ_ARCHIVED_PATIENT_LIST
  SEARCH_PATIENTS
  READ_RESULT_LIST
  EDIT_PATIENT
  ARCHIVE_PATIENT
  EDIT_FACILITY
  EDIT_ORGANIZATION
  MANAGE_USERS
  START_TEST
  UPDATE_TEST
  SUBMIT_TEST
  EXPORT_TEST_EVENT
  ACCESS_ALL_FACILITIES
}

enum OrganizationRole {
  ENTRY_ONLY
  USER
  ADMIN
}

enum TestCorrectionStatus {
  ORIGINAL
  CORRECTED
  REMOVED
}

type TestDescription {
  name(nameType: String = "long"): String!
  loincCode: String!
}

type DeviceType {
  internalId: ID
  name: String
  manufacturer: String
  model: String
  loincCode: String
  swabType: String
}
type Patient {
  internalId: ID
  facility: Facility
  lookupId: String
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  race: String
  birthDate: LocalDate
  gender: String
  ethnicity: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  telephone: String
  email: String
  role: String
  isDeleted: Boolean
  residentCongregateSetting: Boolean
  employedInHealthcare: Boolean
  lastTest: TestResult
  testResults: [TestResult!]!
}
type Facility {
  id: ID
  name: String
  cliaNumber: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  phone: String
  email: String
  deviceTypes: [DeviceType]
  defaultDeviceType: DeviceType
  orderingProvider: Provider
}
type Provider {
  firstName: String
  middleName: String
  lastName: String
  suffix: String
  NPI: String
  street: String
  streetTwo: String
  city: String
  county: String
  state: String
  zipCode: String
  phone: String
}
type Organization {
  internalId: ID
  name: String
  externalId: String
  testingFacility: [Facility]
}
# When starting from the patient, take a more limited view
type PatientTestResult {
  internalId: ID
  id: ID
  dateTested: DateTime
  result: ResultValue
}
# TestResult and TestOrder should have the same properties
type TestOrder {
  internalId: ID
  patient: Patient
  dateAdded: String
  pregnancy: String
  noSymptoms: Boolean
  symptoms: String
  symptomOnset: LocalDate
  firstTest: Boolean
  priorTestDate: LocalDate
  priorTestType: String
  priorTestResult: String
  deviceType: DeviceType
  result: String
  dateTested: DateTime
  correctionStatus: String
  reasonForCorrection: String
  patientLink: PatientLink
}
type TestResult {
  internalId: ID
  facility: Facility
  patient: Patient
  dateAdded: String
  pregnancy: String
  noSymptoms: Boolean
  symptoms: String
  symptomOnset: LocalDate
  firstTest: Boolean
  priorTestDate: String
  priorTestType: String
  priorTestResult: String
  deviceType: DeviceType
  result: String
  dateTested: DateTime
  testPerformed: TestDescription!
  correctionStatus: String
  reasonForCorrection: String
}

# Note: we assume a user's email and login username are the same thing.
type User {
  id: ID
  firstName: String
  middleName: String
  lastName: String!
  suffix: String
  email: String!
  isAdmin: Boolean
  roleDescription: String!
  permissions: [UserPermission!]!
  organization: Organization
  roles: [OrganizationRole!]
}

type PatientLink {
  internalId: ID
  createdAt: DateTime
  refreshedAt: DateTime
  testOrder: TestOrder
}

type Query {
  deviceType: [DeviceType]
  patients(facilityId: String, pageNumber: Int, pageSize: Int, showDeleted: Boolean): [Patient]
  patientsCount(facilityId: String, showDeleted: Boolean): Int
  patient(id: String!): Patient
  organization: Organization
  organizations: [Organization]
  queue(facilityId: String!): [TestOrder]
  testResults(facilityId: String!, newerThanDate: DateTime): [TestResult]
  testResult(id: String!): TestResult
  users: [User]
  whoami: User!
}
type Mutation {
  uploadPatients(patientList: Upload!): String
  updateFacility(
    facilityId: String!
    testingFacilityName: String!
    cliaNumber: String
    street: String
    streetTwo: String
    city: String
    county: String
    state: String
    zipCode: String!
    phone: String
    email: String
    orderingProviderFirstName: String!
    orderingProviderMiddleName: String
    orderingProviderLastName: String!
    orderingProviderSuffix: String
    orderingProviderNPI: String!
    orderingProviderStreet: String
    orderingProviderStreetTwo: String
    orderingProviderCity: String
    orderingProviderCounty: String
    orderingProviderState: String
    orderingProviderZipCode: String!
    orderingProviderPhone: String
    deviceTypes: [String]!
    defaultDevice: String!
  ): String
  addFacility(
    testingFacilityName: String!
    cliaNumber: String
    street: String
    streetTwo: String
    city: String
    county: String
    state: String
    zipCode: String!
    phone: String
    email: String
    orderingProviderFirstName: String!
    orderingProviderMiddleName: String
    orderingProviderLastName: String!
    orderingProviderSuffix: String
    orderingProviderNPI: String!
    orderingProviderStreet: String
    orderingProviderStreetTwo: String
    orderingProviderCity: String
    orderingProviderCounty: String
    orderingProviderState: String
    orderingProviderZipCode: String!
    orderingProviderPhone: String
    deviceTypes: [String]!
    defaultDevice: String!
  ): String
  updateOrganization(name: String!): String
  createOrganization(
    name: String!
    externalId: String!
    testingFacilityName: String!
    cliaNumber: String
    street: String
    streetTwo: String
    city: String
    county: String
    state: String
    zipCode: String!
    phone: String
    email: String
    orderingProviderFirstName: String!
    orderingProviderMiddleName: String
    orderingProviderLastName: String!
    orderingProviderSuffix: String
    orderingProviderNPI: String!
    orderingProviderStreet: String
    orderingProviderStreetTwo: String
    orderingProviderCity: String
    orderingProviderCounty: String
    orderingProviderState: String
    orderingProviderZipCode: String!
    orderingProviderPhone: String
    deviceTypes: [String]!
    defaultDevice: String!
  ): Organization
  addUser(
    firstName: String
    middleName: String
    lastName: String!
    suffix: String
    email: String!
    organizationExternalId: String!
    role: OrganizationRole
  ): User
  addUserToCurrentOrg(
    firstName: String
    middleName: String
    lastName: String!
    suffix: String
    email: String!
    role: OrganizationRole
  ): User
  updateUser(
    id: ID!
    firstName: String
    middleName: String
    lastName: String!
    suffix: String
    email: String!
  ): User
  updateUserRole(id: ID!, role: OrganizationRole!): OrganizationRole
  setUserIsDeleted(id: ID!, deleted: Boolean!): User
  addPatient(
    facilityId: String
    lookupId: String
    firstName: String!
    middleName: String
    lastName: String!
    suffix: String
    birthDate: LocalDate!
    street: String!
    streetTwo: String
    city: String
    state: String!
    zipCode: String!
    telephone: String!
    role: String
    email: String
    county: String
    race: String
    ethnicity: String
    gender: String
    residentCongregateSetting: Boolean!
    employedInHealthcare: Boolean!
  ): String
  updatePatient(
    facilityId: String
    patientId: String!
    lookupId: String
    firstName: String!
    middleName: String
    lastName: String!
    suffix: String
    birthDate: LocalDate!
    street: String!
    streetTwo: String
    city: String
    state: String!
    zipCode: String!
    telephone: String!
    role: String
    email: String
    county: String
    race: String
    ethnicity: String
    gender: String
    residentCongregateSetting: Boolean!
    employedInHealthcare: Boolean!
  ): String
  setPatientIsDeleted(id: String!, deleted: Boolean!): Patient
  addTestResult(
    deviceId: String!
    result: String!
    patientId: String!
    dateTested: DateTime
  ): String
  editQueueItem(
    id: String!
    deviceId: String
    result: String
    dateTested: DateTime
  ): TestOrder
  correctTestMarkAsError(id: String!, reason: String): TestResult
  addPatientToQueue(
    facilityId: String!
    patientId: String!
    pregnancy: String
    symptoms: String
    firstTest: Boolean
    priorTestDate: LocalDate
    priorTestType: String
    priorTestResult: String
    symptomOnset: LocalDate
    noSymptoms: Boolean
  ): String
  removePatientFromQueue(patientId: String!): String
  clearQueue: Int
  updateTimeOfTestQuestions(
    patientId: String!
    pregnancy: String
    symptoms: String
    firstTest: Boolean
    priorTestDate: LocalDate
    priorTestType: String
    priorTestResult: String
    symptomOnset: LocalDate
    noSymptoms: Boolean
  ): String
  createDeviceType(
    name: String!
    manufacturer: String!
    model: String!
    loincCode: String!
    swabType: String!
  ): DeviceType
  updateDeviceType(
    id: String!
    name: String
    manufacturer: String
    model: String
    loincCode: String
    swabType: String
  ): DeviceType
  refreshPatientLink(internalId: String!): PatientLink
  sendPatientLinkSms(internalId: String!): String
}
