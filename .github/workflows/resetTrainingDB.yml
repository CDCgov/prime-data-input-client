name: Deploy Training

on:
  workflow_dispatch:
  schedule:
    # Run this on a daily timer as well in order to reset the training DB
    - cron: '* 9 * * *'

env:
  DEPLOY_ENV: training
  NODE_VERSION: 14
concurrency:
  group: training-deploy

jobs:
  docker-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to ACR
        run: docker login ${{ secrets.ACR_REPO_URL }} -u ${{ secrets.ACR_ADMIN_USERNAME }} -p ${{ secrets.ACR_ADMIN_PASWORD }}
      - name: Build and push Docker images
        run: ./build_and_push.sh
  deploy-backend:
    runs-on: ubuntu-latest
    needs: docker-build
    defaults:
      run:
        working-directory: ./ops
    env:
      ARM_CLIENT_ID: ${{ secrets.TERRAFORM_ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.TERRAFORM_ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.TERRAFORM_ARM_TENANT_ID }}
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.15.1
      - name: Terraform Init
        run: make init-${{ env.DEPLOY_ENV }}
      - name: Replace Azure training DB
        run: |
          cd ${{ env.DEPLOY_ENV }}/persistent
          terraform taint module.db.azurerm_postgresql_database.simple_report
          terraform apply -target="module.db.azurerm_postgresql_database.simple_report" -auto-approve
          cd -
      - name: Azure deploy Api
        run: |
          # Grab the currently deployed commit from TF state using the linux_fx_version variable to ensure we don't change the deployed version
          export DEPLOYED_COMMIT=$(terraform -chdir=training state show module.simple_report_api.azurerm_app_service.service | grep linux_fx_version | cut -d ':' -f 2 | tr -d '"')
          make deploy-${{ env.DEPLOY_ENV }}-api
      - name: Wait for staging deploy to complete
        timeout-minutes: 10
        run: make wait-for-${{ env.DEPLOY_ENV }}
      - name: Promote staging to production
        run: make promote-${{ env.DEPLOY_ENV }}
